{"version":3,"sources":["pages/profile/default-avatar.png","pages/user-profile/default-avatar.png","components/AvatarLink.tsx","hooks/useFirebase.ts","hooks/useStorage.ts","components/SeparatePost.tsx","hooks/useDatabase.ts","pages/Main.tsx","hooks/useAuth.ts","pages/Login.tsx","components/Header.tsx","pages/Register.tsx","utils/file.ts","components/PostsTable.tsx","components/Layout.tsx","pages/profile/Profile.tsx","hooks/useFile.ts","pages/CreateArticle.tsx","components/PostHeader.tsx","components/PostArticle.tsx","components/SeparateComment.tsx","components/PostComments.tsx","components/NewComment.tsx","pages/Post.tsx","components/PublicRoute.tsx","components/PrivateRoute.tsx","pages/EditArticle.tsx","pages/user-profile/UserPostsTable.tsx","pages/user-profile/UserProfile.tsx","services/Transport.ts","pages/test/Test.tsx","app/App.tsx","serviceWorker.ts","index.tsx","components/default-avatar.png"],"names":["module","exports","styles","makeStyles","avatar","height","width","borderRadius","DEFAULT_AVATAR","require","AvatarLink","props","classes","context","useContext","AppContext","to","user","id","userLink","className","src","avatarLink","useFirebase","auth","Auth","fb","credential","EmailAuthProvider","database","storage","useStorage","getDownloadURL","fileName","ref","getChildDownloadURL","child","put","data","backgroundColor","red","card","padding","display","gridTemplateColumns","gridRowGap","boxSizing","link","textDecoration","text","overflow","textOverflow","content","SeparatePost","post","useState","userImage","setUserImage","getAvatar","a","avatarURL","useEffect","Card","variant","CardHeader","title","name","subheader","moment","createdAt","format","CardContent","Typography","useDatabase","undefined","setData","fetchData","path","connectionType","on","snapshot","val","once","addData","set","updateData","update","removeData","remove","getKey","push","key","v4","theme","container","position","marginTop","posts","Main","setPosts","serverPosts","setServerPosts","users","setUsers","usersData","fetchUsersData","serverPostsData","fetchServerPostsData","userData","Object","values","keys","map","item","index","allPosts","userPosts","forEach","postList","find","userId","sort","b","left","Date","getTime","useAuth","firebase","onRegister","email","login","password","createUserWithEmailAndPassword","onLogin","signInWithEmailAndPassword","onAuthStateChanged","fun","error","completed","onSignOut","signOut","OnReauthenticateWithCredential","currentUser","reauthenticateWithCredential","onCurrentUser","top","transform","register","root","marginLeft","color","Login","setEmail","setPassword","setError","history","useHistory","TextField","label","value","onChange","e","target","type","Button","onClick","then","catch","message","icon","logo","fontSize","Header","anchorEl","setAnchorEl","open","Boolean","listen","AppBar","Toolbar","IconButton","aria-label","aria-controls","aria-haspopup","event","currentTarget","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","onLogout","success","Register","repeatPassword","setRepeatPassword","setLogin","setSuccess","createDate","toISOString","result","updateProfile","displayName","uid","dataURLtoFile","dataurl","filename","head","split","last","mime","match","byteString","atob","n","length","u8arr","Uint8Array","charCodeAt","blob","Blob","File","getExtension","resolve","file","reader","FileReader","readAsArrayBuffer","onloadend","ext","get","fileType","getUnsafeExtension","toLowerCase","tableContainer","postName","PostsTable","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","row","onEditPost","Edit","onDeletePost","Delete","alignItems","Layout","classNames","children","justifyItems","gridColumnGap","borderStyle","borderColor","avatarContainer","inputFile","informationContainer","marginRight","Profile","creationDate","setCreationDate","emailSuccess","setEmailSuccess","emailError","setEmailError","userName","setUserName","userNameSuccess","setUserNameSuccess","userNameError","setUserNameError","pass","setPass","repeatPass","setRepeatPass","currentPassword","setCurrentPassword","passSuccess","setPassSuccess","passError","setPassError","setUserPosts","inputRef","useRef","params","setFile","setSrc","loadFile","f","getError","readAsDataURL","fromEvent","subscribe","size","maxFileSize","Promise","whiteList","indexOf","join","deleteFile","useFile","fetchPost","postsData","onChangeAvatar","files","fullWidth","current","click","avatarName","image","updateUser","component","Alert","severity","onPassChange","updatePassword","code","credentials","paddingTop","paddingBottom","CreateArticle","setName","setText","postSuccess","setPostSuccess","postError","setPostError","required","autoFocus","inputProps","maxLength","multiline","rows","postId","PostHeader","postCreatedDate","PostArticle","paragraph","buttons","button","uploadEditedCommentButton","SeparateComment","userLogin","setUserLogin","userAvatar","setUserAvatar","commentEditField","setCommentEditField","editedComment","setEditedComment","userIdData","fetchUserIdData","useParams","commentId","comment","getUserData","action","PostComments","comments","commentButton","NewComment","setComment","commentSuccess","setCommentSuccess","commentError","setCommentError","onCreateComment","Post","creatorId","setComments","setUserData","fetchUser","commentsData","fetchCommentsData","commentsObjectData","reverse","String","PublicRoute","render","rest","routeProps","exact","PrivateRoute","EditArticle","editedPostData","fetchEditedPostData","UserPostsTable","UserProfile","userPostsData","setUserPostsData","fetchPosts","transport","client","axios","create","handlers","serverUrl","this","baseURL","handler","url","reject","response","body","delete","useStyles","formControl","margin","minWidth","Test","setPost","formTitle","setFormTitle","FormControl","InputLabel","Select","commentsResponse","firebaseConfig","initializeApp","init","createContext","App","setAuth","setUser","authentication","window","onbeforeunload","localStorage","setItem","location","pathname","redirectPath","getItem","photoURL","updateEmail","Provider","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.dd139a4b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default-avatar.5097b024.png\";","module.exports = __webpack_public_path__ + \"static/media/default-avatar.5097b024.png\";","import React, {useContext} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {AppContext} from \"../app/App\";\r\n\r\ninterface IProps {\r\n    avatarLink?: string | null;\r\n    userLink?: string;\r\n}\r\n\r\nconst styles = makeStyles( () => ({\r\n    avatar: {\r\n        height: 40,\r\n        width: 40,\r\n        borderRadius: \"50%\",\r\n    },\r\n}));\r\n\r\nconst DEFAULT_AVATAR = require('./default-avatar.png')\r\n\r\nexport const AvatarLink = (props:IProps) => {\r\n    const classes = styles();\r\n    const context = useContext(AppContext);\r\n\r\n    return (\r\n        <Link to={context.user?.id === props.userLink ? `/profile` : `/users/${props.userLink}`}>\r\n            <img\r\n                className={classes.avatar}\r\n                src={\r\n                    props.avatarLink\r\n                        ? props.avatarLink\r\n                        : DEFAULT_AVATAR\r\n                }\r\n            />\r\n        </Link>\r\n    )\r\n}","import { fb } from \"../app/App\";\r\n\r\ninterface IFirebase {\r\n    auth: {\r\n        Auth: (app?: firebase.app.App) => firebase.auth.Auth;\r\n        credential: (email: string, password: string) => firebase.auth.AuthCredential;\r\n    };\r\n    database: (app?: firebase.app.App) => firebase.database.Database;\r\n    storage: (app?: firebase.app.App) => firebase.storage.Storage;\r\n}\r\n\r\nexport const useFirebase = (): IFirebase => {\r\n    return {\r\n        auth: {\r\n            Auth: fb.auth,\r\n            credential: fb.auth.EmailAuthProvider.credential,\r\n        },\r\n        database: fb.database,\r\n        storage: fb.storage,\r\n    };\r\n};\r\n","import { useFirebase } from \"./useFirebase\";\r\n\r\ninterface IFirebaseStorage<T> {\r\n    getDownloadURL(fileName: string): Promise<any>;\r\n    getChildDownloadURL(fileName: string): Promise<any>;\r\n    put(data: Blob | Uint8Array | ArrayBuffer, avatarName: string): firebase.storage.UploadTask;\r\n}\r\n\r\nexport const useStorage = <T>(): IFirebaseStorage<T> => {\r\n    const { storage } = useFirebase();\r\n\r\n    const getDownloadURL = (fileName:string) => {\r\n        return storage().ref(fileName).getDownloadURL()\r\n    }\r\n\r\n    const getChildDownloadURL = (fileName:string) => {\r\n        return storage().ref().child(fileName).getDownloadURL()\r\n    }\r\n\r\n    const put = (data: Blob | Uint8Array | ArrayBuffer, fileName: string) => {\r\n        return storage().ref().child(fileName).put(data)\r\n    }\r\n\r\n    return {\r\n        getDownloadURL,\r\n        getChildDownloadURL,\r\n        put\r\n    }\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card, CardContent, CardHeader, Typography } from \"@material-ui/core\";\r\nimport { red } from \"@material-ui/core/colors\";\r\nimport { IPost } from \"../entity/post\";\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport { AvatarLink } from \"./AvatarLink\";\r\nimport { useStorage } from \"../hooks/useStorage\";\r\n\r\ninterface IProps {\r\n    post: IPost;\r\n}\r\n\r\nconst styles = makeStyles(() => ({\r\n    avatar: {\r\n        backgroundColor: red[500],\r\n    },\r\n    card: {\r\n        padding: 20,\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr\",\r\n        gridRowGap: 20,\r\n        width: \"100%\",\r\n        boxSizing: \"border-box\",\r\n    },\r\n    link: {\r\n        textDecoration: \"none\",\r\n        display: \"grid\",\r\n    },\r\n    text: {\r\n        overflow: \"hidden\",\r\n        textOverflow: \"ellipsis\",\r\n    },\r\n    content: {\r\n        overflow: \"hidden\",\r\n    },\r\n}));\r\n\r\nconst DEFAULT_AVATAR = require(\"./default-avatar.png\");\r\n\r\nexport const SeparatePost = (props: IProps) => {\r\n    const classes = styles();\r\n    const { post } = props;\r\n    const [userImage, setUserImage] = useState(\"\");\r\n    const storage = useStorage<string>()\r\n\r\n    const getAvatar = async () => {\r\n        const user = post.user;\r\n        if (user) {\r\n            if (user.avatar) {\r\n                const avatarURL = await storage.getDownloadURL(user.avatar);\r\n                setUserImage(avatarURL);\r\n            } else {\r\n                setUserImage(DEFAULT_AVATAR);\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAvatar();\r\n    }, [post.user]);\r\n\r\n    return (\r\n        <Link to={`/posts/${post.user?.id}/${post.id}`} className={classes.link}>\r\n            <Card className={classes.card} variant={\"outlined\"}>\r\n                <CardHeader\r\n                    avatar={<AvatarLink avatarLink={userImage} userLink={props.post.user?.id} />}\r\n                    title={post.name}\r\n                    subheader={moment(post.createdAt).format(\"MMMM Do YYYY, h:mm:ss a\")}\r\n                />\r\n                <CardContent className={classes.content}>\r\n                    <Typography className={classes.text}>{post.text}</Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </Link>\r\n    );\r\n};\r\n","import { useFirebase } from \"./useFirebase\";\r\nimport { useState } from \"react\";\r\nimport { v4 } from \"uuid\";\r\n\r\ninterface IFirebaseDatabase<T> {\r\n    data: T | undefined;\r\n\r\n    setData(data: T | undefined): void;\r\n\r\n    fetchData(path: string, connectionType: \"on\" | \"once\"): void;\r\n\r\n    addData(data: T | undefined, path: string): Promise<any>;\r\n\r\n    updateData(data: T | undefined, path: string): Promise<any>;\r\n\r\n    removeData(path: string): Promise<any>;\r\n\r\n    getKey(): string;\r\n}\r\n\r\nexport const useDatabase = <T>(): IFirebaseDatabase<T> => {\r\n    const { database } = useFirebase();\r\n    const [data, setData] = useState<T | undefined>(undefined);\r\n\r\n    const fetch = (path: string, connectionType: \"on\" | \"once\") => {\r\n        if (connectionType === \"on\") {\r\n            database()\r\n                .ref(path)\r\n                .on(\"value\", (snapshot) => {\r\n                    setData(snapshot.val());\r\n                });\r\n        } else {\r\n            database()\r\n                .ref(path)\r\n                .once(\"value\", (snapshot) => {\r\n                    setData(snapshot.val());\r\n                });\r\n        }\r\n    };\r\n\r\n    const getKey = () => database().ref().push().key || v4()\r\n\r\n    const add = (data: T, path: string) => {\r\n        return database()\r\n            .ref(path)\r\n            .set({ ...data });\r\n    };\r\n\r\n    const update = (data: T, path: string) => {\r\n        return database()\r\n            .ref(path)\r\n            .update({ ...data });\r\n    };\r\n\r\n    const remove = (path: string) => {\r\n        return database().ref(path).remove();\r\n    }\r\n\r\n    return {\r\n        data,\r\n        setData,\r\n        fetchData: fetch,\r\n        addData: add,\r\n        updateData: update,\r\n        removeData: remove,\r\n        getKey\r\n    };\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { red } from \"@material-ui/core/colors\";\r\nimport { IUser } from \"../entity/user\";\r\nimport { IPost, IServerPost } from \"../entity/post\";\r\nimport { SeparatePost } from \"../components/SeparatePost\";\r\nimport { useDatabase } from \"../hooks/useDatabase\";\r\n\r\nconst styles = makeStyles((theme: Theme) => ({\r\n    container: {\r\n        position: \"relative\",\r\n        marginTop: 80,\r\n        padding: 50,\r\n    },\r\n    avatar: {\r\n        backgroundColor: red[500],\r\n    },\r\n    posts: {\r\n        display: \"grid\",\r\n        gridRowGap: 40,\r\n    },\r\n}));\r\n\r\nexport const Main = () => {\r\n    const classes = styles();\r\n    const [posts, setPosts] = useState<IPost[]>([]);\r\n    const [serverPosts, setServerPosts] = useState<IServerPost[]>([]);\r\n    const [users, setUsers] = useState<IUser[]>([]);\r\n    const { data: usersData, fetchData: fetchUsersData } = useDatabase<IUser[]>()\r\n    const { data: serverPostsData, fetchData: fetchServerPostsData } = useDatabase<IServerPost>()\r\n\r\n    useEffect(() => {\r\n        fetchUsersData(\"/users\", \"on\")\r\n        fetchServerPostsData(\"/posts\", \"on\")\r\n    }, [])\r\n\r\n    useEffect ( () => {\r\n        if(usersData) {\r\n            const userData: IUser[] = Object.values(usersData);\r\n            const keys = Object.keys(usersData);\r\n            setUsers(userData.map((item, index) => ({ ...item, id: keys[index] })));\r\n        }\r\n\r\n        if(serverPostsData) {\r\n            const allPosts: Array<{ [key: string]: IServerPost }> = Object.values(serverPostsData);\r\n            const userPosts: IServerPost[] = [];\r\n            allPosts.forEach((item) =>\r\n                Object.values(item).forEach((item) => userPosts.push(item)),\r\n            );\r\n            setServerPosts(userPosts);\r\n        }\r\n    }, [usersData, serverPostsData])\r\n\r\n    useEffect(() => {\r\n        const postList: IPost[] = serverPosts\r\n            .map((post) => ({\r\n                ...post,\r\n                user: users.find((item) => item.id === post.userId),\r\n            }))\r\n            .sort((a, b) => {\r\n                const left = new Date(a.createdAt).getTime();\r\n                const right = new Date(b.createdAt).getTime();\r\n                return right - left;\r\n            });\r\n        setPosts(postList);\r\n    }, [users, serverPosts]);\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.posts}>\r\n                {posts.map((item, index) => (\r\n                    <SeparatePost post={item} key={index} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import fb from \"firebase\";\r\nimport { useFirebase } from \"./useFirebase\";\r\ninterface IAuth {\r\n    onRegister: (email: string, login: string, password: string) => Promise<fb.auth.UserCredential>;\r\n    onLogin: (email: string, password: string) => Promise<fb.auth.UserCredential>;\r\n    credential: (email: string, password: string) => firebase.auth.AuthCredential;\r\n    onAuthStateChanged: (\r\n        fun: firebase.Observer<any> | ((a: firebase.User | null) => any),\r\n        error?: (a: firebase.auth.Error) => any,\r\n        completed?: firebase.Unsubscribe,\r\n    ) => firebase.Unsubscribe;\r\n    onSignOut: () => Promise<void>;\r\n    OnReauthenticateWithCredential: (\r\n        credential: firebase.auth.AuthCredential,\r\n    ) => Promise<firebase.auth.UserCredential> | undefined;\r\n    onCurrentUser: () => firebase.User | null;\r\n}\r\n\r\nexport const useAuth = (): IAuth => {\r\n    const firebase = useFirebase();\r\n\r\n    const register = (email: string, login: string, password: string) => {\r\n        return firebase.auth.Auth().createUserWithEmailAndPassword(email, password);\r\n    };\r\n\r\n    const login = (email: string, password: string) => {\r\n        return firebase.auth.Auth().signInWithEmailAndPassword(email, password);\r\n    };\r\n\r\n    const signOut = () => {\r\n        return firebase.auth.Auth().signOut();\r\n    };\r\n\r\n    const currentUser = () => {\r\n        return firebase.auth.Auth().currentUser\r\n    }\r\n\r\n    const credential = (email: string, password: string) => {\r\n        return firebase.auth.credential(email, password);\r\n    };\r\n\r\n    const authStateChanged = (\r\n        fun: firebase.Observer<any> | ((a: firebase.User | null) => any),\r\n        error?: (a: firebase.auth.Error) => any,\r\n        completed?: firebase.Unsubscribe,\r\n    ) => {\r\n        return firebase.auth.Auth().onAuthStateChanged(fun);\r\n    };\r\n\r\n    const reauthenticateWithCredential = (credential: firebase.auth.AuthCredential) => {\r\n        return firebase.auth.Auth().currentUser?.reauthenticateWithCredential(credential);\r\n    };\r\n\r\n    return {\r\n        onRegister: register,\r\n        onLogin: login,\r\n        credential,\r\n        onAuthStateChanged: authStateChanged,\r\n        onSignOut: signOut,\r\n        OnReauthenticateWithCredential: reauthenticateWithCredential,\r\n        onCurrentUser: currentUser,\r\n    };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Button, Card, TextField, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {Link, useHistory} from \"react-router-dom\";\r\nimport { useAuth } from \"../hooks/useAuth\";\r\n\r\nconst styles = makeStyles(() => ({\r\n    container: {\r\n        height: \"100vh\",\r\n        position: \"relative\",\r\n    },\r\n    card: {\r\n        padding: 20,\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        width: 600,\r\n        transform: \"translate(-50%, -50%)\",\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr\",\r\n        gridRowGap: 20,\r\n    },\r\n    register: {\r\n        textDecoration: \"none\",\r\n    },\r\n    root: {\r\n        marginLeft: \"auto\",\r\n    },\r\n    error: {\r\n        color: \"red\",\r\n    },\r\n}));\r\n\r\nexport const Login = () => {\r\n    const classes = styles();\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [error, setError] = useState<string | undefined>(undefined);\r\n    const history = useHistory();\r\n    const auth = useAuth()\r\n\r\n    const onLogin = () => {\r\n        auth.onLogin(email, password)\r\n            .then(() => history.push(\"/profile\"))\r\n            .catch((error) => {\r\n                setError(error.message);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <Card className={classes.card} variant=\"outlined\">\r\n                <TextField\r\n                    id=\"standard-basic\"\r\n                    label=\"Email\"\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n                <TextField\r\n                    id=\"standard-basic\"\r\n                    label=\"Password\"\r\n                    type={\"password\"}\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n                <Button variant=\"contained\" color=\"primary\" onClick={onLogin}>\r\n                    Login\r\n                </Button>\r\n                <Typography className={classes.root}>\r\n                    <Link className={classes.register} to={\"/register\"}>\r\n                        Register\r\n                    </Link>\r\n                </Typography>\r\n                {error && <p className={classes.error}>{error}</p>}\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { AppBar, IconButton, MenuItem, Menu, Toolbar, Typography, Button } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { AppContext } from \"../app/App\";\r\nimport { Test } from \"../pages/test/Test\";\r\n\r\ninterface IProps {\r\n    onLogout?(): void;\r\n}\r\n\r\nconst styles = makeStyles(() => ({\r\n    icon: {\r\n        marginLeft: \"auto\",\r\n    },\r\n    logo: {\r\n        width: \"100px\",\r\n        textDecoration: \"none\",\r\n        color: \"white\",\r\n        fontSize: \"35px\",\r\n    },\r\n    login: {\r\n        marginLeft: \"auto\",\r\n        backgroundColor: \"white\",\r\n    },\r\n    avatar: {\r\n        height: 40,\r\n        width: 40,\r\n        borderRadius: \"50%\",\r\n    },\r\n}));\r\n\r\nconst DEFAULT_AVATAR = require(\"./default-avatar.png\");\r\n\r\nexport const Header = (props: IProps) => {\r\n    const classes = styles();\r\n    const history = useHistory();\r\n    const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);\r\n    const open = Boolean(anchorEl);\r\n    const context = useContext(AppContext);\r\n    const currentUser = context.user;\r\n\r\n    useEffect(() => {\r\n        history.listen(() => {\r\n            setAnchorEl(null);\r\n        });\r\n    }, []);\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const logout = () => {\r\n        if (!props.onLogout) {\r\n            return;\r\n        }\r\n        props.onLogout();\r\n        history.push(\"/login\");\r\n    };\r\n\r\n    const goToProfile = () => {\r\n        setAnchorEl(null);\r\n        history.push(\"/profile\");\r\n    };\r\n\r\n    const goToTest = () => {\r\n        history.push(\"/test\");\r\n    }\r\n\r\n    return (\r\n        <AppBar position=\"fixed\">\r\n            <Toolbar>\r\n                <Typography>\r\n                    <Link className={classes.logo} to={\"/\"}>\r\n                        myBlog.net\r\n                    </Link>\r\n                </Typography>\r\n                {context.auth ? (\r\n                    <div className={classes.icon}>\r\n                        <IconButton\r\n                            aria-label=\"account of current user\"\r\n                            aria-controls=\"menu-appbar\"\r\n                            aria-haspopup=\"true\"\r\n                            color=\"inherit\"\r\n                            onClick={handleMenu}\r\n                        >\r\n                            <img\r\n                                className={classes.avatar}\r\n                                src={\r\n                                    currentUser?.avatar\r\n                                        ? currentUser.avatar\r\n                                        : DEFAULT_AVATAR\r\n                                }\r\n                            />\r\n                        </IconButton>\r\n                        <Menu\r\n                            id=\"menu-appbar\"\r\n                            anchorEl={anchorEl}\r\n                            anchorOrigin={{\r\n                                vertical: \"top\",\r\n                                horizontal: \"right\",\r\n                            }}\r\n                            keepMounted\r\n                            transformOrigin={{\r\n                                vertical: \"top\",\r\n                                horizontal: \"right\",\r\n                            }}\r\n                            open={open}\r\n                            onClose={handleClose}\r\n                        >\r\n                            <MenuItem onClick={goToProfile}>Profile</MenuItem>\r\n                            <MenuItem onClick={logout}>Logout</MenuItem>\r\n                            <MenuItem onClick={goToTest}>Test</MenuItem>\r\n                        </Menu>\r\n                    </div>\r\n                ) : (\r\n                    <Button\r\n                        className={classes.login}\r\n                        onClick={() => history.push(\"/login\")}\r\n                        color={\"default\"}\r\n                    >\r\n                        Login\r\n                    </Button>\r\n                )}\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Button, Card, TextField, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useAuth } from \"../hooks/useAuth\";\r\nimport { useDatabase } from \"../hooks/useDatabase\";\r\nimport { IUserData } from \"../entity/user\";\r\nimport moment from \"moment\";\r\n\r\nconst styles = makeStyles(() => ({\r\n    container: {\r\n        height: \"100vh\",\r\n        position: \"relative\",\r\n    },\r\n    card: {\r\n        padding: 20,\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        width: 600,\r\n        transform: \"translate(-50%, -50%)\",\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr\",\r\n        gridRowGap: 20,\r\n    },\r\n    success: {\r\n        color: \"green\",\r\n    },\r\n    error: {\r\n        color: \"red\",\r\n    },\r\n    login: {\r\n        textDecoration: \"none\",\r\n    },\r\n    root: {\r\n        marginLeft: \"auto\",\r\n    },\r\n}));\r\n\r\nexport const Register = () => {\r\n    const classes = styles();\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [repeatPassword, setRepeatPassword] = useState(\"\");\r\n    const [login, setLogin] = useState(\"\");\r\n    const [error, setError] = useState<string | undefined>(undefined);\r\n    const [success, setSuccess] = useState(false);\r\n    const database = useDatabase<IUserData>();\r\n    const history = useHistory();\r\n    const auth = useAuth();\r\n    const createDate = moment().toISOString();\r\n\r\n    const onRegister = () => {\r\n        const data = {\r\n            email,\r\n            login,\r\n            createdAt: createDate\r\n        }\r\n        if (password !== repeatPassword) {\r\n            setError(\"Passwords aren't equal!\");\r\n            return;\r\n        }\r\n        auth.onRegister(email, login, password)\r\n            .then(async (result) => {\r\n                if (result.user) {\r\n                    result.user\r\n                        .updateProfile({\r\n                            displayName: login,\r\n                        })\r\n                        .then(() => setSuccess(true))\r\n                        .catch((error) => {\r\n                            setError(error.message);\r\n                            setSuccess(false);\r\n                        });\r\n                    await database.addData(data, `users/${result.user.uid}`)\r\n                    history.push(\"/profile\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setError(error.message);\r\n                setSuccess(false);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <Card className={classes.card} variant=\"outlined\">\r\n                <TextField label=\"Login\" value={login} onChange={(e) => setLogin(e.target.value)} />\r\n                <TextField label=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n                <TextField\r\n                    type={\"password\"}\r\n                    label=\"Password\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n                <TextField\r\n                    type={\"password\"}\r\n                    label=\"Confirm password\"\r\n                    value={repeatPassword}\r\n                    onChange={(e) => setRepeatPassword(e.target.value)}\r\n                />\r\n                <Button variant=\"contained\" color=\"primary\" onClick={onRegister}>\r\n                    Register\r\n                </Button>\r\n                <Typography className={classes.root}>\r\n                    <Link className={classes.login} to={\"/login\"}>\r\n                        Login\r\n                    </Link>\r\n                </Typography>\r\n                {success && <p className={classes.success}>Success!</p>}\r\n                {error && <p className={classes.error}>{error}</p>}\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n","import fileType from 'file-type';\r\nimport {get, head, last} from 'lodash';\r\n\r\nexport function dataURLtoFile(dataurl: string, filename: string): File {\r\n    const type = head(dataurl.split(','));\r\n    const src = last(dataurl.split(','));\r\n\r\n    const mime = last(type!.match(/:(.*?);/));\r\n    const byteString = atob(src!);\r\n    let n = byteString.length;\r\n    const u8arr = new Uint8Array(n);\r\n    while (n) {\r\n        u8arr[n - 1] = byteString.charCodeAt(n - 1);\r\n        n -= 1; // to make eslint happy\r\n    }\r\n    const blob = new Blob([u8arr], {type: mime});\r\n    const file = new File([blob], filename, {type: mime});\r\n    return file;\r\n}\r\n\r\nexport function getExtension(resolve: (ext: string) => void, file: File): void {\r\n    const reader = new FileReader();\r\n    if (!file) {\r\n        return;\r\n    }\r\n    reader.readAsArrayBuffer(file);\r\n    (reader.onloadend = () => {\r\n        const result = reader.result as ArrayBuffer;\r\n        const ext = get(fileType(result), 'ext', '');\r\n        resolve(ext);\r\n    });\r\n}\r\n\r\nexport function getUnsafeExtension(file: File): string {\r\n    return (last(file.name.split('.')) || '').toLowerCase();\r\n}\r\n","import React from \"react\";\r\nimport {\r\n    IconButton,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n} from \"@material-ui/core\";\r\nimport moment from \"moment\";\r\nimport { Delete, Edit } from \"@material-ui/icons\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { IServerPost } from \"../entity/post\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\ninterface IUserPosts {\r\n    userPosts: IServerPost[];\r\n\r\n    onDeletePost(value: string): void;\r\n    onEditPost(value:string): void;\r\n}\r\n\r\nconst styles = makeStyles(() => ({\r\n    tableContainer: {\r\n        marginTop: 10,\r\n    },\r\n    postName: {\r\n        overflow: \"hidden\",\r\n    },\r\n}));\r\nexport const PostsTable = (props: IUserPosts) => {\r\n    const classes = styles();\r\n\r\n    return (\r\n        <TableContainer className={classes.tableContainer}>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\">Posts</TableCell>\r\n                        <TableCell align=\"center\">Creation Date</TableCell>\r\n                        <TableCell align=\"center\">Edit</TableCell>\r\n                        <TableCell align=\"center\">Delete</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {props.userPosts.map((row) => (\r\n                        <TableRow key={row.name}>\r\n                            <TableCell align=\"center\" className={classes.postName}>\r\n                                <Link to={`/posts/${row.userId}/${row.id}`}>{row.name}</Link>\r\n                            </TableCell>\r\n                            <TableCell align=\"center\">\r\n                                {moment(row.createdAt).format(\"MMMM Do YYYY, h:mm:ss a\")}\r\n                            </TableCell>\r\n                            <TableCell align=\"center\">\r\n                                <IconButton onClick={() => props.onEditPost(row.id)}>\r\n                                    <Edit />\r\n                                </IconButton>\r\n                            </TableCell>\r\n                            <TableCell align=\"center\">\r\n                                <IconButton onClick={() => props.onDeletePost(row.id)}>\r\n                                    <Delete />\r\n                                </IconButton>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport classNames from \"classnames\";\r\n\r\ninterface IProps {\r\n    className?: string;\r\n}\r\n\r\nconst styles = makeStyles(() => ({\r\n    container: {\r\n        marginTop: \"64px\",\r\n        position: \"relative\",\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr\",\r\n        alignItems: \"flex-start\",\r\n    },\r\n}));\r\n\r\nexport const Layout: FC<IProps> = (props) => {\r\n    const classes = styles();\r\n\r\n    return <div className={classNames(classes.container, props.className)}>{props.children}</div>;\r\n};\r\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Card, TextField, Typography } from \"@material-ui/core\";\r\nimport { AppContext } from \"../../app/App\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { useFile } from \"../../hooks/useFile\";\r\nimport { v4 } from \"uuid\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { IServerPost } from \"../../entity/post\";\r\nimport { PostsTable } from \"../../components/PostsTable\";\r\nimport { Layout } from \"../../components/Layout\";\r\nimport { useDatabase } from \"../../hooks/useDatabase\";\r\nimport moment from \"moment\";\r\nimport { useAuth } from \"../../hooks/useAuth\";\r\nimport { useStorage } from \"../../hooks/useStorage\";\r\n\r\nconst styles = makeStyles(() => ({\r\n    container: {\r\n        justifyItems: \"flex-end\",\r\n        gridColumnGap: 40,\r\n        padding: \"20px 100px 20px 50px\",\r\n    },\r\n    Card: {\r\n        padding: 20,\r\n        width: 600,\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr\",\r\n        gridRowGap: 20,\r\n        marginTop: \"30px\",\r\n    },\r\n    avatar: {\r\n        height: \"350px\",\r\n        borderStyle: \"solid\",\r\n        borderColor: \"gray\",\r\n        width: \"100%\",\r\n    },\r\n    avatarContainer: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr\",\r\n        gridRowGap: 20,\r\n        width: 300,\r\n        position: \"fixed\",\r\n    },\r\n    inputFile: {\r\n        display: \"none\",\r\n    },\r\n    informationContainer: {\r\n        marginRight: 15,\r\n    },\r\n    tableContainer: {\r\n        marginTop: 10,\r\n    },\r\n    postName: {\r\n        overflow: \"hidden\",\r\n    },\r\n}));\r\n\r\nconst DEFAULT_AVATAR = require(\"./default-avatar.png\");\r\n\r\nexport const Profile = () => {\r\n    const history = useHistory();\r\n    const classes = styles();\r\n    const [creationDate, setCreationDate] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [emailSuccess, setEmailSuccess] = useState(false);\r\n    const [emailError, setEmailError] = useState<undefined | string>(undefined);\r\n    const [userName, setUserName] = useState(\"\");\r\n    const [userNameSuccess, setUserNameSuccess] = useState(false);\r\n    const [userNameError, setUserNameError] = useState<undefined | string>(undefined);\r\n    const [pass, setPass] = useState(\"\");\r\n    const [repeatPass, setRepeatPass] = useState(\"\");\r\n    const [currentPassword, setCurrentPassword] = useState(\"\");\r\n    const [passSuccess, setPassSuccess] = useState(false);\r\n    const [passError, setPassError] = useState<undefined | string>(undefined);\r\n    const [userPosts, setUserPosts] = useState<IServerPost[]>([]);\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n    const { src, loadFile, file, setSrc } = useFile({\r\n        whiteList: [\"jpg\", \"png\"],\r\n        maxFileSize: 2097152,\r\n    });\r\n    const database = useDatabase();\r\n    const storage = useStorage<string>();\r\n    const auth = useAuth();\r\n    const context = useContext(AppContext);\r\n    const userId = context.user?.id;\r\n    const currentUser = context.user;\r\n    const { data: post, fetchData: fetchPost } = useDatabase<IServerPost>();\r\n\r\n    useEffect(() => {\r\n        if (currentUser) {\r\n            setSrc(currentUser.avatar);\r\n            if (currentUser.email) {\r\n                setEmail(currentUser.email);\r\n            }\r\n            if (currentUser.login) {\r\n                setUserName(currentUser.login);\r\n            }\r\n            if (currentUser.createdAt) {\r\n                setCreationDate(currentUser.createdAt);\r\n            }\r\n        }\r\n    }, [currentUser, setUserName, setEmail, setSrc]);\r\n\r\n    useEffect(() => {\r\n        fetchPost(`posts/${userId}`, \"on\");\r\n    }, [userId]);\r\n\r\n    useEffect(() => {\r\n        if (post) {\r\n            const postsData: IServerPost[] = Object.values(post);\r\n            setUserPosts(postsData);\r\n        } else {\r\n            setUserPosts([]);\r\n        }\r\n    }, [post]);\r\n\r\n    const onEmailChange = () => {\r\n        context\r\n            .updateUser({ email })\r\n            .then(() => {\r\n                setEmailSuccess(true);\r\n                database.updateData({ email }, `users/${userId}`);\r\n            })\r\n            .catch((error) => setEmailError(error.message));\r\n    };\r\n\r\n    const onUserNameChange = () => {\r\n        context\r\n            .updateUser({ login: userName })\r\n            .then(() => {\r\n                setUserNameSuccess(true);\r\n                database.updateData({ login: userName }, `users/${userId}`);\r\n            })\r\n            .catch((error) => setUserNameError(error.message));\r\n    };\r\n\r\n    const onPassChange = () => {\r\n        if (context) {\r\n            if (pass === repeatPass) {\r\n                context\r\n                    .updatePassword(pass)\r\n                    .then(() => setPassSuccess(true))\r\n                    .catch((error) => {\r\n                        if (error.code === \"auth/requires-recent-login\") {\r\n                            if (context.user?.email) {\r\n                                const credentials = auth.credential(\r\n                                    context.user.email,\r\n                                    currentPassword,\r\n                                );\r\n                                context\r\n                                    .reauthenticateWithCredential(credentials)\r\n                                    .then(onPassChange)\r\n                                    .catch((e) => setPassError(e.message));\r\n                            }\r\n                        } else {\r\n                            setPassError(error.message);\r\n                        }\r\n                    });\r\n            } else {\r\n                setPassError(\"Passwords aren't equal\");\r\n            }\r\n        }\r\n    };\r\n\r\n    const openWindow = () => {\r\n        if (!inputRef.current) {\r\n            return;\r\n        }\r\n        inputRef.current.click();\r\n    };\r\n\r\n    const onChangeAvatar = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const file = event.target.files?.item(0);\r\n        if (!file) {\r\n            return;\r\n        }\r\n        await loadFile(file);\r\n    };\r\n\r\n    const goToArticle = () => {\r\n        history.push(\"/article\");\r\n    };\r\n\r\n    const onUploadAvatar = () => {\r\n        if (file) {\r\n            const avatarName = v4();\r\n            storage.put(file, avatarName).then(async () => {\r\n                const image = await storage.getChildDownloadURL(avatarName);\r\n                setSrc(image);\r\n                database.updateData({ avatar: avatarName }, `users/${userId}`);\r\n                context.updateUser({\r\n                    avatar: image,\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    const onDeletePost = (value: string) => {\r\n        database.removeData(`posts/${userId}/${value}`);\r\n        database.removeData(`comments/${value}`);\r\n    };\r\n\r\n    const onEditPost = (value: string) => {\r\n        history.push(`/edit/${value}`);\r\n    };\r\n\r\n    return (\r\n        <Layout className={classes.container}>\r\n            <div className={classes.avatarContainer}>\r\n                <img className={classes.avatar} src={src || DEFAULT_AVATAR} />\r\n                <input\r\n                    type=\"file\"\r\n                    className={classes.inputFile}\r\n                    ref={inputRef}\r\n                    onChange={onChangeAvatar}\r\n                />\r\n                <Button variant=\"contained\" color=\"primary\" fullWidth onClick={openWindow}>\r\n                    Choose image\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"primary\" fullWidth onClick={onUploadAvatar}>\r\n                    Upload\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"primary\" fullWidth onClick={goToArticle}>\r\n                    Write an article\r\n                </Button>\r\n            </div>\r\n            <div className={classes.informationContainer}>\r\n                <Card className={classes.Card} variant=\"outlined\">\r\n                    <Typography variant=\"h5\" component=\"h4\">\r\n                        Creation date: {moment(creationDate).format(\"MMMM Do YYYY, h:mm:ss a\")}\r\n                    </Typography>\r\n                </Card>\r\n                <Card className={classes.Card} variant=\"outlined\">\r\n                    <Typography variant=\"h5\" component=\"h4\">\r\n                        Your email:\r\n                    </Typography>\r\n                    <TextField value={email} onChange={(e) => setEmail(e.target.value)} />\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onEmailChange}>\r\n                        Change your email\r\n                    </Button>\r\n                    {emailSuccess && <Alert severity=\"success\">Email successfully changed!</Alert>}\r\n                    {emailError && <Alert severity=\"error\">{emailError}</Alert>}\r\n                </Card>\r\n                <Card className={classes.Card} variant=\"outlined\">\r\n                    <Typography variant=\"h5\" component=\"h4\">\r\n                        Your username:\r\n                    </Typography>\r\n                    <TextField value={userName} onChange={(e) => setUserName(e.target.value)} />\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onUserNameChange}>\r\n                        Change your username\r\n                    </Button>\r\n                    {userNameSuccess && (\r\n                        <Alert severity=\"success\">username successfully changed!</Alert>\r\n                    )}\r\n                    {userNameError && <Alert severity=\"error\">{userNameError}</Alert>}\r\n                </Card>\r\n                <Card className={classes.Card} variant=\"outlined\">\r\n                    <Typography variant=\"h5\" component=\"h4\">\r\n                        Change your password:\r\n                    </Typography>\r\n                    <TextField\r\n                        type={\"password\"}\r\n                        value={currentPassword}\r\n                        onChange={(e) => setCurrentPassword(e.target.value)}\r\n                        label=\"Current password\"\r\n                    />\r\n                    <TextField\r\n                        type={\"password\"}\r\n                        value={pass}\r\n                        onChange={(e) => setPass(e.target.value)}\r\n                        label=\"New password\"\r\n                    />\r\n                    <TextField\r\n                        type={\"password\"}\r\n                        value={repeatPass}\r\n                        onChange={(e) => setRepeatPass(e.target.value)}\r\n                        label=\"Repeat new password\"\r\n                    />\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onPassChange}>\r\n                        Change your password\r\n                    </Button>\r\n                    {passSuccess && (\r\n                        <Alert severity=\"success\">Password successfully changed!</Alert>\r\n                    )}\r\n                    {passError && <Alert severity=\"error\">{passError}</Alert>}\r\n                </Card>\r\n                <PostsTable\r\n                    userPosts={userPosts}\r\n                    onDeletePost={onDeletePost}\r\n                    onEditPost={onEditPost}\r\n                />\r\n            </div>\r\n        </Layout>\r\n    );\r\n};\r\n","import { Dispatch, SetStateAction, useState } from \"react\";\r\nimport { fromEvent } from \"rxjs/internal/observable/fromEvent\";\r\nimport { dataURLtoFile, getExtension, getUnsafeExtension } from \"../utils\";\r\n\r\nexport interface IFileServiceParams {\r\n    maxFileSize: number;\r\n    whiteList: string[];\r\n}\r\n\r\nexport function useFile(\r\n    params: IFileServiceParams,\r\n): {\r\n    file?: File;\r\n    src?: string | null;\r\n    setSrc: Dispatch<SetStateAction<string | undefined | null>>;\r\n    getError?: (file: File) => Promise<undefined | string>;\r\n    setError: Dispatch<SetStateAction<string | undefined>>;\r\n    loadFile: (file: File) => Promise<void>;\r\n    deleteFile: () => void;\r\n    error: string | undefined;\r\n} {\r\n    const [file, setFile] = useState<File | undefined>(undefined);\r\n    const [src, setSrc] = useState<string | undefined | null>(undefined);\r\n    const [error, setError] = useState<string | undefined>(undefined);\r\n\r\n    const loadFile = async (f: File) => {\r\n        if (!!(await getError(f))) {\r\n            setError(await getError(f));\r\n            return;\r\n        }\r\n        setError(undefined);\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(f);\r\n        fromEvent(reader, \"loadend\").subscribe(async () => {\r\n            try {\r\n                setSrc(reader.result as string);\r\n                setFile(dataURLtoFile(reader.result as string, f.name));\r\n            } catch (error) {\r\n                // Nothing here\r\n            }\r\n        });\r\n    };\r\n\r\n    const getError = async (file: File): Promise<string | undefined> => {\r\n        if (file.size > params.maxFileSize) {\r\n            return `Upload the file less than ${params.maxFileSize / (1024 * 1024)} MB.`;\r\n        }\r\n        const ext = await new Promise((resolve: (ext: string) => void) =>\r\n            getExtension(resolve, file),\r\n        );\r\n        if (params.whiteList.indexOf(ext) < 0) {\r\n            return `The file type does not match the extension. Available extensions: ${params.whiteList.join(\r\n                \", \",\r\n            )}`;\r\n        }\r\n        if (getUnsafeExtension(file) !== ext) {\r\n            return \"The file type does not match the extension. Please, try again.\";\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    const deleteFile = () => {\r\n        setSrc(undefined);\r\n        setFile(undefined);\r\n        setError(undefined);\r\n    };\r\n\r\n    return { file, src, getError, loadFile, deleteFile, setSrc, setError, error };\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, TextField, Typography } from \"@material-ui/core\";\r\nimport { AppContext } from \"../app/App\";\r\nimport { v4 } from \"uuid\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport moment from \"moment\";\r\nimport { useDatabase } from \"../hooks/useDatabase\";\r\nimport { IServerPost } from \"../entity/post\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst styles = makeStyles(() => ({\r\n    container: {\r\n        marginTop: \"64px\",\r\n        position: \"relative\",\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr\",\r\n        justifyItems: \"center\",\r\n        padding: 150,\r\n        paddingTop: \"50px\",\r\n        paddingBottom: \"50px\",\r\n        alignItems: \"flex-start\",\r\n        gridRowGap: 20,\r\n    },\r\n}));\r\n\r\nexport const CreateArticle = () => {\r\n    const classes = styles();\r\n    const [name, setName] = useState(\"\");\r\n    const [text, setText] = useState(\"\");\r\n    const [postSuccess, setPostSuccess] = useState(false);\r\n    const [postError, setPostError] = useState(false);\r\n    const database = useDatabase<IServerPost>();\r\n    const context = useContext(AppContext);\r\n    const history = useHistory();\r\n    const inputProps = {\r\n        maxLength: 40,\r\n    };\r\n\r\n    const createArticle = () => {\r\n        const userId = context.user?.id;\r\n        const createDate = moment().toISOString();\r\n        const postId = v4();\r\n        const data = {\r\n            id: postId,\r\n            name,\r\n            text,\r\n            createdAt: createDate,\r\n            userId,\r\n        };\r\n        if (name.length > 0 && text.length > 0) {\r\n            database.addData(data, `posts/${userId}/${postId}`).then(() => {\r\n                setName(\"\");\r\n                setText(\"\");\r\n                setPostSuccess(true);\r\n                history.push(`/posts/${userId}/${postId}`);\r\n            });\r\n        } else {\r\n            setPostError(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <Typography variant=\"h3\" component=\"h1\">\r\n                Write your own article\r\n            </Typography>\r\n            <TextField\r\n                required\r\n                label=\"Article name\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                autoFocus={true}\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n                inputProps={inputProps}\r\n            />\r\n            <TextField\r\n                required\r\n                label=\"Article text\"\r\n                multiline\r\n                rows={14}\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={text}\r\n                onChange={(e) => setText(e.target.value)}\r\n            />\r\n            <Button variant=\"contained\" color=\"primary\" fullWidth onClick={createArticle}>\r\n                Upload\r\n            </Button>\r\n            {postSuccess && <Alert severity=\"success\">Your post has been added!</Alert>}\r\n            {postError && <Alert severity=\"error\">{postError}</Alert>}\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Card, CardHeader } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { IUser } from \"../entity/user\";\r\nimport moment from \"moment\";\r\nimport { AvatarLink } from \"./AvatarLink\";\r\n\r\ninterface IProps {\r\n    user?: IUser;\r\n    postCreatedDate?: string;\r\n}\r\n\r\nconst styles = makeStyles(() => ({\r\n    card: {\r\n        width: \"100%\",\r\n    },\r\n}));\r\n\r\nexport const PostHeader = (props: IProps) => {\r\n    const classes = styles();\r\n\r\n    return (\r\n        <Card className={classes.card} variant={\"outlined\"}>\r\n            <CardHeader\r\n                avatar={<AvatarLink avatarLink={props.user?.avatar} userLink={props.user?.id} />}\r\n                title={props.user?.login}\r\n                subheader={moment(props.postCreatedDate).format(\"MMMM Do YYYY, h:mm:ss a\")}\r\n            />\r\n        </Card>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { IServerPost } from \"../entity/post\";\r\nimport { Card, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\ninterface IProps {\r\n    post?: IServerPost;\r\n}\r\n\r\nconst styles = makeStyles(() => ({\r\n    card: {\r\n        width: \"100%\",\r\n        padding: 15,\r\n        boxSizing: \"border-box\",\r\n    },\r\n    text: {\r\n        overflow: \"hidden\",\r\n        textOverflow: \"ellipsis\",\r\n    },\r\n}));\r\n\r\nexport const PostArticle = (props: IProps) => {\r\n    const classes = styles();\r\n\r\n    return (\r\n        <Card className={classes.card} variant={\"outlined\"}>\r\n            <Typography variant=\"h4\" align={\"center\"}>\r\n                {props.post?.name}\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph={true} className={classes.text}>\r\n                {props.post?.text}\r\n            </Typography>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    CardHeader,\r\n    IconButton,\r\n    TextField,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { IComment } from \"../entity/post\";\r\nimport { AppContext } from \"../app/App\";\r\nimport { IUser } from \"../entity/user\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { red } from \"@material-ui/core/colors\";\r\nimport moment from \"moment\";\r\nimport { Delete, Edit } from \"@material-ui/icons\";\r\nimport { useParams } from \"react-router\";\r\nimport { AvatarLink } from \"./AvatarLink\";\r\nimport { useDatabase } from \"../hooks/useDatabase\";\r\nimport { useStorage } from \"../hooks/useStorage\";\r\n\r\ninterface IProps {\r\n    comment?: IComment;\r\n}\r\n\r\nconst styles = makeStyles(() => ({\r\n    avatar: {\r\n        backgroundColor: red[500],\r\n    },\r\n    card: {\r\n        padding: 20,\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr\",\r\n        gridRowGap: 20,\r\n        width: \"100%\",\r\n        boxSizing: \"border-box\",\r\n        marginTop: 15,\r\n    },\r\n    text: {\r\n        overflow: \"hidden\",\r\n        textOverflow: \"ellipsis\",\r\n    },\r\n    content: {\r\n        overflow: \"hidden\",\r\n    },\r\n    buttons: {\r\n        display: \"flex\",\r\n    },\r\n    button: {\r\n        alignItems: \"flex-start\",\r\n        marginRight: 10,\r\n    },\r\n    uploadEditedCommentButton: {\r\n        marginTop: 10,\r\n    },\r\n}));\r\n\r\nconst DEFAULT_AVATAR = require(\"./default-avatar.png\");\r\n\r\nexport const SeparateComment = (props: IProps) => {\r\n    const [userLogin, setUserLogin] = useState(\"\");\r\n    const [userAvatar, setUserAvatar] = useState(\"\");\r\n    const [commentEditField, setCommentEditField] = useState(false);\r\n    const [editedComment, setEditedComment] = useState(\"\");\r\n    const { data: userIdData, fetchData: fetchUserIdData } = useDatabase<IUser>();\r\n    const classes = styles();\r\n    const { id } = useParams();\r\n    const context = useContext(AppContext);\r\n    const userId = context.user?.id;\r\n    const commentId = props.comment?.commentId;\r\n    const storage = useStorage<string>();\r\n    const database = useDatabase();\r\n\r\n    useEffect(() => {\r\n        fetchUserIdData(`users/${props.comment?.userId}`, \"on\");\r\n    }, [props.comment?.userId]);\r\n\r\n    useEffect(() => {\r\n        getUserData();\r\n    }, [userIdData]);\r\n\r\n    const getUserData = async () => {\r\n        if (userIdData) {\r\n            setUserLogin(userIdData.login);\r\n            if (userIdData.avatar) {\r\n                const avatar = await storage.getDownloadURL(userIdData.avatar);\r\n                setUserAvatar(avatar);\r\n            } else {\r\n                setUserAvatar(DEFAULT_AVATAR);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onDeleteComment = () => {\r\n        database.removeData(`comments/${id}/${commentId}`);\r\n    };\r\n\r\n    const onEditComment = () => {\r\n        setCommentEditField(!commentEditField);\r\n        if (props.comment) {\r\n            setEditedComment(props.comment.comment);\r\n        }\r\n    };\r\n\r\n    const onUploadEditedComment = () => {\r\n        database\r\n            .addData(\r\n                {\r\n                    comment: editedComment,\r\n                    commentId: commentId,\r\n                    createdAt: props.comment?.createdAt,\r\n                    userId: userId,\r\n                },\r\n                `comments/${id}/${commentId}`,\r\n            )\r\n            .then(() => {\r\n                setCommentEditField(false);\r\n                setEditedComment(\"\");\r\n            });\r\n    };\r\n\r\n    return (\r\n        <Card className={classes.card} variant={\"outlined\"}>\r\n            <CardHeader\r\n                avatar={<AvatarLink avatarLink={userAvatar} userLink={props.comment?.userId} />}\r\n                title={userLogin}\r\n                subheader={moment(props.comment?.createdAt).format(\"MMMM Do YYYY, h:mm:ss a\")}\r\n                action={\r\n                    <>\r\n                        {userId === props.comment?.userId && (\r\n                            <div className={classes.buttons}>\r\n                                <IconButton className={classes.button} onClick={onEditComment}>\r\n                                    <Edit />\r\n                                </IconButton>\r\n                                <IconButton className={classes.button} onClick={onDeleteComment}>\r\n                                    <Delete />\r\n                                </IconButton>\r\n                            </div>\r\n                        )}\r\n                    </>\r\n                }\r\n            />\r\n            <CardContent className={classes.content}>\r\n                {commentEditField ? (\r\n                    <div>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            multiline\r\n                            rows={4}\r\n                            value={editedComment}\r\n                            onChange={(e) => setEditedComment(e.target.value)}\r\n                        />\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.uploadEditedCommentButton}\r\n                            onClick={onUploadEditedComment}\r\n                        >\r\n                            Upload\r\n                        </Button>\r\n                    </div>\r\n                ) : (\r\n                    <Typography className={classes.text}>{props.comment?.comment}</Typography>\r\n                )}\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Card, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { SeparateComment } from \"./SeparateComment\";\r\nimport {IComment} from \"../entity/post\";\r\n\r\ninterface IProps {\r\n    comments?: IComment[];\r\n}\r\n\r\nconst styles = makeStyles(() => ({\r\n    card: {\r\n        width: \"100%\",\r\n        padding: 15,\r\n        boxSizing: \"border-box\",\r\n    },\r\n}));\r\n\r\nexport const PostComments = (props:IProps) => {\r\n    const { comments = [] } = props;\r\n    const classes = styles();\r\n\r\n    return (\r\n        <Card className={classes.card} variant={\"outlined\"}>\r\n            <Typography variant={\"h4\"}>Comments:</Typography>\r\n            <div>\r\n                {comments.map((item: IComment) => {\r\n                    return <SeparateComment key={item.commentId} comment={item}/>\r\n                })}\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Button, Card, TextField, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Alert } from \"@material-ui/lab\";\r\n\r\ninterface IProps {\r\n    postId: string;\r\n\r\n    onCreateComment(value: string): Promise<void>;\r\n}\r\n\r\nconst styles = makeStyles(() => ({\r\n    card: {\r\n        width: \"100%\",\r\n        padding: 15,\r\n        boxSizing: \"border-box\",\r\n    },\r\n    commentButton: {\r\n        marginTop: 15,\r\n    },\r\n}));\r\n\r\nexport const NewComment = (props: IProps) => {\r\n    const classes = styles();\r\n    const [comment, setComment] = useState(\"\");\r\n    const [commentSuccess, setCommentSuccess] = useState(false);\r\n    const [commentError, setCommentError] = useState(false);\r\n\r\n    const onUploadComment = () => {\r\n        if (comment.length > 0) {\r\n            props.onCreateComment(comment).then(() => {\r\n                setCommentSuccess(true);\r\n                setComment(\"\");\r\n            });\r\n        } else {\r\n            setCommentError(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card className={classes.card} variant={\"outlined\"}>\r\n            <Typography variant={\"h4\"}>Write a comment:</Typography>\r\n            <TextField\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                multiline\r\n                rows={6}\r\n                value={comment}\r\n                onChange={(e) => setComment(e.target.value)}\r\n            />\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                fullWidth\r\n                className={classes.commentButton}\r\n                onClick={onUploadComment}\r\n            >\r\n                Upload\r\n            </Button>\r\n            {commentSuccess && <Alert severity=\"success\">Your comment has been added!</Alert>}\r\n            {commentError && <Alert severity=\"error\">Comment field must not be empty!</Alert>}\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { AppContext } from \"../app/App\";\r\nimport { IUser } from \"../entity/user\";\r\nimport { useParams } from \"react-router\";\r\nimport { IComment, IServerPost } from \"../entity/post\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { PostHeader } from \"../components/PostHeader\";\r\nimport { PostArticle } from \"../components/PostArticle\";\r\nimport { PostComments } from \"../components/PostComments\";\r\nimport { NewComment } from \"../components/NewComment\";\r\nimport moment from \"moment\";\r\nimport { useDatabase } from \"../hooks/useDatabase\";\r\nimport { useStorage } from \"../hooks/useStorage\";\r\n\r\nconst styles = makeStyles(() => ({\r\n    container: {\r\n        marginTop: \"64px\",\r\n        position: \"relative\",\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr\",\r\n        justifyItems: \"center\",\r\n        padding: 50,\r\n        paddingTop: \"50px\",\r\n        paddingBottom: \"50px\",\r\n        alignItems: \"flex-start\",\r\n        gridRowGap: 20,\r\n    },\r\n}));\r\n\r\nexport const Post = () => {\r\n    const { postId, creatorId } = useParams();\r\n    const [comments, setComments] = useState<IComment[]>([]);\r\n    const [userData, setUserData] = useState<IUser>();\r\n    const context = useContext(AppContext);\r\n    const classes = styles();\r\n    const { data: post, fetchData: fetchPost } = useDatabase<IServerPost>();\r\n    const { data: user, fetchData: fetchUser } = useDatabase<IUser>();\r\n    const { data: commentsData, fetchData: fetchCommentsData } = useDatabase<IComment[]>();\r\n    const database = useDatabase<IComment>();\r\n    const storage = useStorage<string>();\r\n\r\n    useEffect(() => {\r\n        fetchPost(`/posts/${creatorId}/${postId}`, \"once\");\r\n        fetchCommentsData(`comments/${postId}`, \"on\");\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchUser(`/users/${post?.userId}`, \"once\");\r\n    }, [post])\r\n\r\n    useEffect(() => {\r\n        getUserData();\r\n    }, [user]);\r\n\r\n    const getUserData = async () => {\r\n        if (user) {\r\n            if (user.avatar) {\r\n                const avatar = await storage.getDownloadURL(user.avatar)\r\n                setUserData({\r\n                    id: post?.userId,\r\n                    login: user.login,\r\n                    email: user.email,\r\n                    avatar: avatar,\r\n                    createdAt: user.createdAt,\r\n                });\r\n            } else {\r\n                setUserData({\r\n                    id: post?.userId,\r\n                    login: user.login,\r\n                    email: user.email,\r\n                    createdAt: user.createdAt,\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (commentsData) {\r\n            const commentsObjectData: IComment[] = Object.values(commentsData);\r\n            setComments(commentsObjectData.reverse());\r\n        }\r\n    }, [commentsData]);\r\n\r\n    const onCreateComment = (value: string) => {\r\n        const userId = context.user?.id;\r\n        const createDate = moment().toISOString();\r\n        const key = database.getKey();\r\n        const data = {\r\n            createdAt: createDate,\r\n            comment: value,\r\n            userId,\r\n            commentId: key,\r\n        };\r\n        return database.addData(data, `comments/${postId}/${key}`);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <PostHeader user={userData} postCreatedDate={post?.createdAt} />\r\n            <PostArticle post={post} />\r\n            <NewComment postId={String(postId)} onCreateComment={onCreateComment} />\r\n            <PostComments comments={comments} />\r\n        </div>\r\n    );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { Route, Redirect, RouteProps, RouteComponentProps } from \"react-router\";\r\n\r\ninterface IPublicRouteProps extends RouteProps {\r\n    auth: boolean;\r\n    render: (props: RouteComponentProps) => React.ReactNode;\r\n}\r\n\r\nexport const PublicRoute: FC<IPublicRouteProps> = (props) => {\r\n    const { auth, render, ...rest } = props;\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(routeProps: RouteComponentProps) =>\r\n                auth ? <Redirect exact={true} push={true} to={\"/\"} /> : render(routeProps)\r\n            }\r\n        />\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\r\n\r\ninterface IPrivateRouteProps extends RouteProps {\r\n    auth: boolean;\r\n    render: (props: RouteComponentProps) => React.ReactNode;\r\n}\r\n\r\nexport const PrivateRoute = (props: IPrivateRouteProps) => {\r\n    const { render, auth, ...rest } = props;\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(routeProps: RouteComponentProps) =>\r\n                auth ? render(routeProps) : <Redirect exact to={\"/\"} />\r\n            }\r\n        />\r\n    );\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, TextField, Typography } from \"@material-ui/core\";\r\nimport { AppContext } from \"../app/App\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport moment from \"moment\";\r\nimport { useParams } from \"react-router\";\r\nimport { IServerPost } from \"../entity/post\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Layout } from \"../components/Layout\";\r\nimport { useDatabase } from \"../hooks/useDatabase\";\r\n\r\nconst styles = makeStyles(() => ({\r\n    container: {\r\n        justifyItems: \"center\",\r\n        padding: \"50px 150px 50px 150px\",\r\n        gridRowGap: 20,\r\n    },\r\n}));\r\n\r\nexport const EditArticle = () => {\r\n    const classes = styles();\r\n    const history = useHistory();\r\n    const [name, setName] = useState(\"\");\r\n    const [text, setText] = useState(\"\");\r\n    const [postSuccess, setPostSuccess] = useState(false);\r\n    const [postError, setPostError] = useState(false);\r\n    const { data: editedPostData, fetchData: fetchEditedPostData, addData } = useDatabase<IServerPost>();\r\n    const context = useContext(AppContext);\r\n    const userId = context.user?.id\r\n    const { postId } = useParams();\r\n    const inputProps = {\r\n        maxLength: 40,\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchEditedPostData(`posts/${userId}/${postId}`, \"once\");\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (editedPostData) {\r\n            setName(editedPostData.name);\r\n            setText(editedPostData.text);\r\n        }\r\n    }, [editedPostData]);\r\n\r\n    const editArticle = () => {\r\n        const createDate = moment().toISOString();\r\n        const data = {\r\n            name,\r\n            text,\r\n            userId,\r\n            createdAt: createDate,\r\n            id: postId,\r\n        };\r\n        if (name.length > 0 && text.length > 0) {\r\n            addData(data, `/posts/${userId}/${postId}`).then(() => {\r\n                setName(\"\");\r\n                setText(\"\");\r\n                setPostSuccess(true);\r\n                history.push(`/posts/${userId}/${postId}`);\r\n            });\r\n        } else {\r\n            setPostError(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Layout className={classes.container}>\r\n            <Typography variant=\"h3\" component=\"h1\">\r\n                Edit your article\r\n            </Typography>\r\n            <TextField\r\n                required\r\n                label=\"Article name\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                autoFocus={true}\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n                inputProps={inputProps}\r\n            />\r\n            <TextField\r\n                required\r\n                label=\"Article text\"\r\n                multiline\r\n                rows={14}\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={text}\r\n                onChange={(e) => setText(e.target.value)}\r\n            />\r\n            <Button variant=\"contained\" color=\"primary\" fullWidth onClick={editArticle}>\r\n                Upload\r\n            </Button>\r\n            {postSuccess && <Alert severity=\"success\">Your post has been edited!</Alert>}\r\n            {postError && <Alert severity=\"error\">{postError}</Alert>}\r\n        </Layout>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n} from \"@material-ui/core\";\r\nimport moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { IServerPost } from \"../../entity/post\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\ninterface IUserPosts {\r\n    userPosts: IServerPost[];\r\n}\r\n\r\nconst styles = makeStyles(() => ({\r\n    tableContainer: {\r\n        marginTop: 10,\r\n    },\r\n    postName: {\r\n        overflow: \"hidden\",\r\n    },\r\n}));\r\nexport const UserPostsTable = (props: IUserPosts) => {\r\n    const classes = styles();\r\n\r\n    return (\r\n        <TableContainer className={classes.tableContainer}>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\">Posts</TableCell>\r\n                        <TableCell align=\"center\">Creation Date</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {props.userPosts.map((row) => (\r\n                        <TableRow key={row.name}>\r\n                            <TableCell align=\"center\" className={classes.postName}>\r\n                                <Link to={`/posts/${row.userId}/${row.id}`}>{row.name}</Link>\r\n                            </TableCell>\r\n                            <TableCell align=\"center\">\r\n                                {moment(row.createdAt).format(\"MMMM Do YYYY, h:mm:ss a\")}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};","import React, { useEffect, useState } from \"react\";\r\nimport { Card, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useParams } from \"react-router\";\r\nimport { IUser } from \"../../entity/user\";\r\nimport { IServerPost } from \"../../entity/post\";\r\nimport { UserPostsTable } from \"./UserPostsTable\";\r\nimport { Layout } from \"../../components/Layout\";\r\nimport { useDatabase } from \"../../hooks/useDatabase\";\r\nimport { useStorage } from \"../../hooks/useStorage\";\r\nimport moment from \"moment\";\r\n\r\nconst styles = makeStyles(() => ({\r\n    container: {\r\n        justifyItems: \"flex-end\",\r\n        gridColumnGap: 40,\r\n        padding: \"20px 100px 20px 50px\",\r\n    },\r\n    card: {\r\n        padding: 20,\r\n        width: 600,\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr\",\r\n        gridRowGap: 20,\r\n        marginTop: \"30px\",\r\n    },\r\n    avatar: {\r\n        height: \"350px\",\r\n        borderStyle: \"solid\",\r\n        borderColor: \"gray\",\r\n        width: \"100%\",\r\n    },\r\n    avatarContainer: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr\",\r\n        gridRowGap: 20,\r\n        width: 300,\r\n        position: \"fixed\",\r\n    },\r\n    informationContainer: {\r\n        marginRight: 15,\r\n    },\r\n}));\r\n\r\nconst DEFAULT_AVATAR = require(\"./default-avatar.png\");\r\n\r\nexport const UserProfile = () => {\r\n    const classes = styles();\r\n    const { userId } = useParams();\r\n    const [userPostsData, setUserPostsData] = useState<IServerPost[]>([]);\r\n    const [userData, setUserData] = useState<IUser | undefined>(undefined);\r\n    const { data: user, fetchData: fetchUser } = useDatabase<IUser>();\r\n    const { data: posts, fetchData: fetchPosts } = useDatabase<IUser>();\r\n    const storage = useStorage<string>()\r\n\r\n    useEffect(() => {\r\n        fetchUser(`users/${userId}`, \"on\");\r\n        fetchPosts(`posts/${userId}`, \"on\")\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getUserData()\r\n    }, [user])\r\n\r\n    useEffect(() => {\r\n        if (posts) {\r\n            const postsData: IServerPost[] = Object.values(posts);\r\n            setUserPostsData(postsData);\r\n        } else {\r\n            setUserPostsData([]);\r\n        }\r\n    }, [posts])\r\n\r\n    const getUserData = async () => {\r\n        if (user) {\r\n            if (user.avatar) {\r\n                const avatar = await storage.getDownloadURL(user.avatar)\r\n                setUserData({\r\n                    id: user.id,\r\n                    login: user.login,\r\n                    email: user.email,\r\n                    avatar: avatar,\r\n                    createdAt: user.createdAt,\r\n                });\r\n            } else {\r\n                setUserData({\r\n                    id: user.id,\r\n                    login: user.login,\r\n                    email: user.email,\r\n                    createdAt: user.createdAt,\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Layout className={classes.container}>\r\n            <div className={classes.avatarContainer}>\r\n                <img className={classes.avatar} src={userData?.avatar || DEFAULT_AVATAR} />\r\n            </div>\r\n            <div className={classes.informationContainer}>\r\n                <Card className={classes.card} variant=\"outlined\">\r\n                    <Typography variant=\"h5\" component=\"h4\">\r\n                        Creation date: {moment(userData?.createdAt).format(\"MMMM Do YYYY, h:mm:ss a\")}\r\n                    </Typography>\r\n                </Card>\r\n                <Card className={classes.card} variant=\"outlined\">\r\n                    <Typography variant=\"h5\" component=\"h4\">\r\n                        {userData?.login}\r\n                    </Typography>\r\n                </Card>\r\n                <UserPostsTable userPosts={userPostsData} />\r\n            </div>\r\n        </Layout>\r\n    );\r\n};\r\n","import axios, { AxiosInstance, AxiosResponse } from \"axios\";\r\n\r\nexport class HttpTransport {\r\n    private client: AxiosInstance = axios.create();\r\n    private readonly handlers: Array<(error?: Error) => void> = [];\r\n\r\n    public init(serverUrl: string): void {\r\n        this.client = axios.create({\r\n            baseURL: serverUrl,\r\n        });\r\n    }\r\n\r\n    public subscribe(handler: (error?: Error) => void): void {\r\n        this.handlers.push(handler);\r\n    }\r\n\r\n    public get<R extends object>(url: string, params?: object): Promise<R> {\r\n        return new Promise<R>((resolve, reject) => {\r\n            this.client\r\n                .get(url, { params })\r\n                .then((response: AxiosResponse<R>) => {\r\n                    return resolve(response.data);\r\n                })\r\n                .catch((error) => {\r\n                    reject(error);\r\n                    this.handlers.forEach((handler) => handler(error));\r\n                });\r\n        });\r\n    }\r\n\r\n    public put<R extends object, B extends object>(\r\n        url: string,\r\n        body: B,\r\n        params?: object,\r\n    ): Promise<R> {\r\n        return new Promise<R>((resolve, reject) => {\r\n            this.client\r\n                .put(url, { ...body }, { params })\r\n                .then((response: AxiosResponse<R>) => {\r\n                    return resolve(response.data);\r\n                })\r\n                .catch((error) => {\r\n                    reject(error);\r\n                    this.handlers.forEach((handler) => handler(error));\r\n                });\r\n        });\r\n    }\r\n\r\n    public post<R extends object, B extends object>(\r\n        url: string,\r\n        body: B,\r\n        params?: object,\r\n    ): Promise<R> {\r\n        return new Promise<R>((resolve, reject) => {\r\n            this.client\r\n                .post(url, { ...body }, { params })\r\n                .then((response: AxiosResponse<R>) => {\r\n                    return resolve(response.data);\r\n                })\r\n                .catch((error) => {\r\n                    reject(error);\r\n                    this.handlers.forEach((handler) => handler(error));\r\n                });\r\n        });\r\n    }\r\n\r\n    async delete<Response = void>(url: string, params?: object): Promise<Response> {\r\n        return new Promise<Response>((resolve, reject) => {\r\n            this.client\r\n                .delete(url, { params })\r\n                .then((response) => {\r\n                    return resolve(response.data);\r\n                })\r\n                .catch((error) => {\r\n                    reject(error);\r\n                    this.handlers.forEach((handler) => handler(error));\r\n                });\r\n        });\r\n    }\r\n}\r\n\r\nexport const transport = new HttpTransport();\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { transport } from \"../../services/Transport\";\r\nimport { IApiComment, IApiPost } from \"./apiEntity\";\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    CardHeader,\r\n    FormControl,\r\n    InputLabel,\r\n    MenuItem,\r\n    Select,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    container: {\r\n        position: \"relative\",\r\n        marginTop: 80,\r\n        padding: 50,\r\n    },\r\n    formControl: {\r\n        margin: 10,\r\n        minWidth: 500,\r\n    },\r\n    card: {\r\n        padding: 20,\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr\",\r\n        gridRowGap: 20,\r\n        width: \"100%\",\r\n        boxSizing: \"border-box\",\r\n    },\r\n    text: {\r\n        overflow: \"hidden\",\r\n        textOverflow: \"ellipsis\",\r\n    },\r\n    content: {\r\n        overflow: \"hidden\",\r\n    },\r\n}));\r\n\r\nexport const Test = () => {\r\n    const classes = useStyles();\r\n    const [posts, setPosts] = useState<IApiPost[]>([]);\r\n    const [post, setPost] = useState<IApiPost>();\r\n    const [formTitle, setFormTitle] = useState(\"\");\r\n    const [comments, setComments] = useState<IApiComment[]>([])\r\n\r\n    useEffect(() => {\r\n        transport.get(\"/posts\").then((response: any) => {\r\n            setPosts(response);\r\n        });\r\n    }, []);\r\n\r\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        transport.get(`posts/${event.target.value}`).then((response: any) => {\r\n            setFormTitle(event.target.value as string);\r\n            setPost(response);\r\n            transport.get(`posts/${event.target.value}/comments`).then((commentsResponse: any) => {\r\n                setComments(commentsResponse)\r\n            })\r\n        })\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel>Posts</InputLabel>\r\n                <Select value={formTitle} onChange={handleChange}>\r\n                    {posts.map((item) => (\r\n                        <MenuItem value={item.id} key={item.id}>\r\n                            {item.title}\r\n                        </MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n            {post && (\r\n                <Card className={classes.card} variant={\"outlined\"}>\r\n                    <CardHeader title={post?.title || \"Title\"} />\r\n                    <CardContent className={classes.content}>\r\n                        <Typography className={classes.text}>{post?.body || \"Text\"}</Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            )}\r\n            {comments && (\r\n                comments.map((item) => (\r\n                    <Card key={item.id} className={classes.card} variant={\"outlined\"}>\r\n                        <CardHeader\r\n                            title={item.name}\r\n                        />\r\n                        <CardContent className={classes.content}>\r\n                            <Typography className={classes.text}>{item.body}</Typography>\r\n                        </CardContent>\r\n                    </Card>\r\n                ))\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import React, { createContext, useEffect, useState } from \"react\";\r\nimport { Route, Switch, useHistory } from \"react-router\";\r\nimport { Main } from \"../pages/Main\";\r\nimport { Login } from \"../pages/Login\";\r\nimport { Header } from \"../components/Header\";\r\nimport { Register } from \"../pages/Register\";\r\nimport * as firebase from \"firebase\";\r\nimport { Profile } from \"../pages/profile/Profile\";\r\nimport { CreateArticle } from \"../pages/CreateArticle\";\r\nimport { IUser } from \"../entity/user\";\r\nimport { IAppContext } from \"../entity/app\";\r\nimport { Post } from \"../pages/Post\";\r\nimport { PublicRoute } from \"../components/PublicRoute\";\r\nimport { PrivateRoute } from \"../components/PrivateRoute\";\r\nimport { EditArticle } from \"../pages/EditArticle\";\r\nimport { UserProfile } from \"../pages/user-profile/UserProfile\";\r\nimport { useDatabase } from \"../hooks/useDatabase\";\r\nimport { useStorage } from \"../hooks/useStorage\";\r\nimport { useAuth } from \"../hooks/useAuth\";\r\nimport { Test } from \"../pages/test/Test\";\r\nimport { transport } from \"../services/Transport\";\r\n\r\nexport const fb = firebase;\r\nconst firebaseConfig = require(\"../firebase/firebase-config.json\");\r\nfb.initializeApp(firebaseConfig);\r\ntransport.init(\"https://jsonplaceholder.typicode.com\")\r\n\r\nexport const AppContext = createContext<IAppContext>({\r\n    auth: false,\r\n    user: {\r\n        email: \"\",\r\n        login: \"\",\r\n        id: \"\",\r\n        avatar: null,\r\n    },\r\n    updateUser(user: Partial<IUser>) {\r\n        return Promise.resolve();\r\n    },\r\n\r\n    updatePassword(password:string) {\r\n        return Promise.resolve();\r\n    },\r\n\r\n    reauthenticateWithCredential(credentials: firebase.auth.AuthCredential) {\r\n        return Promise.resolve();\r\n    }\r\n});\r\n\r\nfunction App() {\r\n    const [auth, setAuth] = useState(false);\r\n    const [user, setUser] = useState<IUser | undefined>(undefined);\r\n    const history = useHistory();\r\n    const storage = useStorage();\r\n    const authentication = useAuth();\r\n    const { data, fetchData } = useDatabase<IUser>();\r\n\r\n    useEffect(() => {\r\n        window.onbeforeunload = () => {\r\n            localStorage.setItem(\"pathBeforeReload\", window.location.pathname);\r\n        };\r\n        const redirectPath = localStorage.getItem(\"pathBeforeReload\");\r\n        if (redirectPath) {\r\n            history.push(redirectPath);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        authentication.onAuthStateChanged(async (userData) => {\r\n            if (userData) {\r\n                setAuth(!!userData);\r\n                if (userData && userData.email && userData.displayName) {\r\n                    setUser({\r\n                        login: userData.displayName,\r\n                        email: userData.email,\r\n                        avatar: userData.photoURL,\r\n                        id: userData.uid,\r\n                    });\r\n                }\r\n                await fetchData(`users/${user?.id}`, \"once\")\r\n                if (data?.avatar) {\r\n                    const avatarURL = await storage.getDownloadURL(data?.avatar);\r\n                    userData.updateProfile({\r\n                        photoURL: avatarURL,\r\n                    });\r\n                    updateUser({avatar: avatarURL});\r\n                }\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const onLogout = () => {\r\n        authentication.onSignOut().then(() => setAuth(false));\r\n    };\r\n\r\n    const reauthenticateWithCredential = (credentials: firebase.auth.AuthCredential) => {\r\n        authentication.OnReauthenticateWithCredential(credentials)\r\n        return Promise.resolve();\r\n    }\r\n\r\n    const updatePassword = (password: string): Promise<void> => {\r\n        const currentUser = authentication.onCurrentUser();\r\n        if (currentUser) {\r\n            return currentUser.updatePassword(password)\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    const updateUser = (value: Partial<IUser>): Promise<void> => {\r\n        if (user) {\r\n            setUser({\r\n                id: user.id,\r\n                email: value.email || user.email,\r\n                login: value.login || user.login,\r\n                avatar: value.avatar || user.avatar,\r\n            });\r\n        }\r\n        const currentUser = authentication.onCurrentUser();\r\n        if (currentUser) {\r\n            const isEmailChanged = currentUser?.email !== value?.email;\r\n            if (isEmailChanged && value.email) {\r\n                return currentUser.updateEmail(value.email);\r\n            }\r\n            const isLoginChanged = currentUser?.displayName !== value.login;\r\n            if (isLoginChanged && value.login) {\r\n                return currentUser.updateProfile({\r\n                    displayName: value.login,\r\n                });\r\n            }\r\n            const isAvatarChanged = currentUser?.photoURL !== value.avatar;\r\n            if (isAvatarChanged && value.avatar) {\r\n                return currentUser.updateProfile({\r\n                    photoURL: value.avatar,\r\n                });\r\n            }\r\n        }\r\n        return Promise.resolve();\r\n    };\r\n\r\n    return (\r\n        <AppContext.Provider value={{ auth, user, updateUser, updatePassword, reauthenticateWithCredential }}>\r\n            <Header onLogout={onLogout} />\r\n            <Switch>\r\n                <Route exact path={\"/\"} component={Main} />\r\n                <PublicRoute auth={auth} path={\"/login\"} render={() => <Login />} />\r\n                <Route path={\"/register\"} component={Register} />\r\n                <PrivateRoute auth={auth} path={\"/profile\"} render={() => <Profile />} />\r\n                <PrivateRoute auth={auth} path={\"/users/:userId\"} render={() => <UserProfile />} />\r\n                <PrivateRoute auth={auth} path={\"/article\"} render={() => <CreateArticle />} />\r\n                <PrivateRoute auth={auth} path={\"/edit/:postId\"} render={() => <EditArticle />} />\r\n                <Route path={\"/posts/:creatorId/:postId\"} component={Post} />\r\n                <Route path={\"/test\"} component={Test} />\r\n            </Switch>\r\n        </AppContext.Provider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n      <BrowserRouter>\r\n          <App />\r\n      </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/default-avatar.5097b024.png\";"],"sourceRoot":""}